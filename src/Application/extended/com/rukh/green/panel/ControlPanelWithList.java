package extended.com.rukh.green.panel;

import au.com.bytecode.opencsv.CSVReader;
import callcenterapplication.data.CSVRow;
import core.com.rukh.green.panel.AbstractControlPanel;
import core.com.rukh.green.panel.BasePanel;
import java.awt.event.ActionEvent;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Rajan Prasad Upadhyay
 */
public class ControlPanelWithList extends AbstractControlPanel implements ListSelectionListener {

    public JList list;
    List<CSVRow> csvData;

    /**
     * Creates new form ControlPanelWithList
     *
     * @param parent is the parent panel of this panel
     */
    public ControlPanelWithList(BasePanel parent) {
        super(parent);
        initComponents();

        String[] array = {"Load your csv file"};
        list = new JList(array);
        this.add(list);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    public JList getList() {
        return list;
    }

    public void setList(JList list) {
        this.list = list;
    }

    public void refresh() {
        this.invalidate();
        this.removeAll();
        this.add(list);
        this.revalidate();
        this.repaint();
    }

    public JList createList(Object[] array) {
        JList list = new JList(array);

        list.addListSelectionListener(this);
        return list;
    }

    public List<CSVRow> getArray(String filePath) throws FileNotFoundException, IOException {
        List<CSVRow> array = new ArrayList<CSVRow>();

        CSVReader parser = new CSVReader(new FileReader(filePath));

        String[] nextLine;

        int count = 0;

        while ((nextLine = parser.readNext()) != null) {
            array.add(new CSVRow(nextLine));
        }

        return array;
    }

    //<editor-fold desc="deleteged methods of frame" defaultstate="collapsed">
    @Override
    public void OpenMenuItemActionPerformed(ActionEvent evt) {
        try {
            System.out.println("ControlPanelWithList : Open menu item clicked");

            csvData = getArray("input.csv");
            //String[] str = {"apple", "orange", "banana"};

            list = createList(csvData.toArray());

            this.refresh();
        } catch (IOException ex) {
            Logger.getLogger(ControlPanelWithList.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void newProjectMenuItemActionPerformed(ActionEvent evt) {
        System.out.println("ControlPanelWithList : new Project menu item clicked");
    }

    @Override
    public void executeMenuItemActionPerformed(ActionEvent evt) {
        System.out.println("ControlPanelWithList : execute menu item clicked");
    }

    @Override
    public void exitMenuItemActionPerformed(ActionEvent evt) {
        System.out.println("ControlPanelWithList : exit menu item clicked");
    }

    @Override
    public void saveMenuItemActionPerformed(ActionEvent evt) {

        System.out.println("ControlPanelWithList : save menu item clicked");
        String OutputFileName = "output.csv";
        
        try (FileWriter writer = new FileWriter(OutputFileName)) {
            String line = null;
            for (int i = 0; i < csvData.size(); i++) {
                writer.write(csvData.get(i).getFullRow());
                writer.write("\n");
            }
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(ControlPanelWithList.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    //</editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void valueChanged(ListSelectionEvent lse) {
        if (lse.getValueIsAdjusting()) {
            JList jlist = ((JList) lse.getSource());
            int index = jlist.getSelectedIndex();

            ListModel model = jlist.getModel();
            Object obj = model.getElementAt(index);
            System.out.println(((CSVRow) obj).getFullRow());

            this.bPanel.changePropertyPanel(new PropertyPanelWithFields(bPanel, (CSVRow) obj));
        }
    }
}
