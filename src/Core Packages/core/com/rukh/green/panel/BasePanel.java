package core.com.rukh.green.panel;

import core.com.rukh.green.frame.BaseFrame;
import java.awt.event.ActionEvent;
import javax.swing.JSplitPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * @author Rajan Prasad Upadhyay
 */
public class BasePanel extends javax.swing.JPanel {

    static Logger logger = LogManager.getLogger(BasePanel.class.getName());

    // <editor-fold defaultstate="collapsed" desc="properties">
    //control variables
    Integer spDividerLocation = 200;
    //guis
    private javax.swing.JSplitPane jSplitPane = new JSplitPane();
    //frames
    private BaseFrame parentFrame;
    // panel iterators
    AbstractControlPanel icontrolPanel;
    AbstractPropertyPanel ipropertyPanel;

    //all the control panels
    AbstractControlPanel acontrolPanel;
    //all the property panels
    AbstractPropertyPanel apropertyPanel;
    // </editor-fold>

    public BasePanel() {
        initComponents();
        initializeObjects();
        //programaticInitialize();
    }

    // <editor-fold defaultstate="collapsed" desc="ProgramaticInitialize(), GUI components configurations/designing">
    
    /**
     * initializes the divider window, and sets the property and control panels.
     * should be called after the propertyPanel and the controlPanel are set properly
     * eg.
     * <pre>
     *  basePanel.setControlPanel(controlPanel);
     *  basePanel.setpropertyPanel(propertyPanel);
     *  basePanel.programaticInitialize();
     * </pre>
     */
    public void programaticInitialize() {
        splitPaneAddEvent();
        this.add(jSplitPane);
        //initializeObjects();
        configureIterators();
        //the layout must be changed to box layout, to allow components cover max area

        jSplitPane.setRightComponent(ipropertyPanel);
        jSplitPane.setLeftComponent(icontrolPanel);
        jSplitPane.setDividerLocation(spDividerLocation);
    }
    // </editor-fold>

    //<editor-fold defaultstate="collapsed" desc="initializeObjects, initialization of controlpanels and property panels">
    /**
     * instanciate the Gui objects like AbstractControlPanel,
     * AbstractPropertyPanel, ControlPanel, NavigationPropertyPanel
     */
    public void initializeObjects() {
        acontrolPanel = new AbstractControlPanel(this);
        apropertyPanel = new AbstractPropertyPanel(this);

        //controlPanel = new ControlPanel(this);
    }

    //</editor-fold>
    private void configureIterators() {
        icontrolPanel = acontrolPanel;
        ipropertyPanel = apropertyPanel;
    }

    public void reDraw() {
        this.invalidate();
        this.revalidate();
    }
    // <editor-fold defaultstate="collapsed" desc="Getters-Setters">   

    public BaseFrame getParentFrame() {
        return parentFrame;
    }

    public void setParentFrame(BaseFrame parentFrame) {
        this.parentFrame = parentFrame;
    }
    
    public void setControlPanel(AbstractControlPanel cPanel){
        this.acontrolPanel = cPanel;
    }
    
    public void setPropertyPanel(AbstractPropertyPanel pPanel){
        this.apropertyPanel = pPanel;
    }
    
    public AbstractControlPanel getControlPanel(){
        return this.acontrolPanel ;
    }
    
    public AbstractPropertyPanel setPropertyPanel(){
        return this.apropertyPanel;
    }
    
    // </editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(160, 204, 180));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    // <editor-fold defaultstate="collapsed" desc="Tree selection event(BaseElement), clicked, called by the controlPanel">
    public void changePropertyPanel(AbstractPropertyPanel propertyPanel) {
         jSplitPane.invalidate();
        jSplitPane.remove(ipropertyPanel);

        ipropertyPanel = propertyPanel;//this is changed

        jSplitPane.setRightComponent(ipropertyPanel);
        jSplitPane.setDividerLocation(spDividerLocation);
        jSplitPane.revalidate();
    }
    
    // Tree node selection event.
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="split-pane property change event">
    /**
     * method to initialize variable value on position change event
     */
    private void splitPaneAddEvent() {
        jSplitPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSplitPane1PropertyChanged(evt);
            }
        });
    }

    private void jSplitPane1PropertyChanged(java.beans.PropertyChangeEvent evt) {
        //code to handle the jsplit pane resized event
        //if divider changed, update it
        if (spDividerLocation != jSplitPane.getDividerLocation()) {
            spDividerLocation = jSplitPane.getDividerLocation();
        }

    }

    // </editor-fold>

    // <editor-fold desc="Delegeted methods of BaseFrame" defaultstate="collapsed">
    public void executeMenuItemActionPerformed(ActionEvent evt) {
        icontrolPanel.executeMenuItemActionPerformed(evt);
    }

    public void newProjectMenuItemActionPerformed(ActionEvent evt) {
        icontrolPanel.newProjectMenuItemActionPerformed(evt);
    }

    public void exitMenuItemActionPerformed(ActionEvent evt) {
        icontrolPanel.exitMenuItemActionPerformed(evt);
    }

    public void saveMenuItemActionPerformed(ActionEvent evt) {
        icontrolPanel.saveMenuItemActionPerformed(evt);
    }

    public void OpenMenuItemActionPerformed(ActionEvent evt) {
        icontrolPanel.OpenMenuItemActionPerformed(evt);
    }
    
    //</editor-fold>
}
